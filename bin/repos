#!/usr/bin/env ruby
#
require 'pry'
require 'colored'

ROOT = File.expand_path '~/code'
IGNORE = ['.archive', '.', '..', 'backbone', 'temp']

class PathWrapper
  attr_accessor :path
  def initialize(path)
    @path = path
  end
  def git_repo?
    return true if File.directory? "#{@path}/.git"
    return false
  end
  def non_git_dir?
    return true if (File.directory? @path and not git_repo?)
    return false
  end
end

class RepoWrapper
  attr_accessor :path
  def initialize(path)
    @path = path
  end

  def run_cmd_in_path cmd, path=@path
    Dir.chdir(path) { `#{cmd}` }
  end

  def summarize
    print title.ljust(25)
    print folder.ljust(15)
    print last_commit.ljust(25)
    print (dirty? ? "YES" : "--").ljust(10)
    print (on_github? ? "--" : "NO").ljust(10)
    print (readme? ? "--" : "NO").ljust(10)
    print "\n"
    # puts "-"*100
  end

  def dirty?
    dirty = run_cmd_in_path "git status -s"
    dirty != ''
  end

  def last_commit(relative=true)
    if relative
      ago = run_cmd_in_path 'git log -1 --pretty="%cr"'
      ago.sub! " ago", ''
    else
      ago = run_cmd_in_path 'git log -1 --pretty="%at"'
    end
    ago.chomp!
  end

  def subpath
    @path.sub "#{ROOT}/", ''
  end

  def title
    subpath.split('/').last
  end

  def folder
    split = subpath.split('/')
    return (split.length > 1) ? split.first : '--'
  end

  def readme?
    files = run_cmd_in_path "ls"
    return (files.match /readme/i)
  end

  def on_github?
    remotes = run_cmd_in_path "git remote -v | grep 'github\.com'"
    return remotes != ""
  end
end

def git_repos(path)
  repos = []
  Dir.new(path).each do |subpath|
    next if IGNORE.include? subpath
    full_path = "#{path}/#{subpath}"
    spw = PathWrapper.new(full_path)
    repos << RepoWrapper.new(full_path) if spw.git_repo?
    repos += git_repos(spw.path) if spw.non_git_dir?
  end
  return repos
end

def print_header
  welcome = "Spelunking under root: #{ROOT}"
  puts ''
  puts welcome + "\n" + '='*(welcome.length)
  puts ''
  headers = {title: "Title", path: "Path", commit: "Last-Commit",
    dirty: "Dirty", github: "Github?", readme: "Readme"}
  spaces = {title: 25, path: 15, commit: 25, dirty: 10, github: 10, readme: 10}
  headers.each_key do |key|
    print headers[key].ljust(spaces[key])
  end
  puts "\n" + "="*(spaces.each_value.inject(:+))
end

def main
  print_header
  repos = git_repos(ROOT)
  repos.sort_by! {|repo| repo.last_commit(false)}
  repos.reverse!
  repos.each {|repo| repo.summarize}
end

main
