unbind-key C-b
set -g prefix C-space
bind -r C-space send-prefix

# Set {{{
set -g default-command "$SHELL"
set -g default-terminal xterm-256color
set -ga terminal-overrides ",alacritty:RGB"
set -g base-index 1
set -g renumber-windows on
set -g automatic-rename off
set -s escape-time 0
set -g display-panes-time 350
set -g display-time 4000
set -g display-panes-time 2000
set -g history-limit 10000
set -g status-keys vi
set -g focus-events on
# }}}

# Styles {{{
# Session name
set -g status-left "#[fg=black,bg=#949FB5,bold] #S #[fg=blue,bg=default,nobold,noitalics,nounderscore]"

#+--- Windows ---+
# Focus
set -g window-status-current-format "#[fg=#949FB5,bg=#181616] #I:#W#F "
# Unfocused
set -g window-status-format "#[fg=white,bg=black,nobold,noitalics,nounderscore] #I:#W#F "

# active and inactive windows mimic kanagawa-dragon nvim dimming
setw -g window-active-style bg=black
setw -g window-style bg="#12120F"

#+--- Panes ---+
set -g pane-border-style "fg=#282727"
set -g pane-active-border-style "fg=#949FB5"
set -g pane-active-border-style 'fg=#3b4261,bg=default'

# Status bar
set -g status-style bg=black,fg=white
set -g status-interval 5
set -g status-right-length 350
set -g status-right "#[fg=white]#{?pane_synchronized,--SYNCED--,} #(battery -t -g black) #(wifi_icon.sh) #(date '+%a, %b %d - %I:%M') "

# command mode
set -g message-style 'bg=#282727,fg=#949FB5'
# }}}

# Copy mode {{{
# Use vim keybindings in copy mode
setw -g mode-keys vi
bind -n M-i copy-mode
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-selection
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "pbcopy"
unbind -T copy-mode-vi Space
bind -T copy-mode-vi Space send -X jump-again
bind-key -T copy-mode-vi 0 send -X back-to-indentation
bind-key -T copy-mode-vi 4 send -X end-of-line
bind Escape copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "❯"

# Default to incremental search in copy-mode
# TODO: ensure / search up by default
bind-key -T copy-mode-vi / command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind-key / copy-mode\; command-prompt -i -p "search up" "send -X search-backward-incremental "%%%""
# }}}

# FIXME: these don't work
bind y run 'tmux save-buffer - | pbcopy '
bind C-y run 'tmux save-buffer - | pbcopy '
# fzf long words to clipboard
bind-key s split-window -v "capture-pane -t 1 -p | sed '/^$/d' | tr ' ' '\n' | awk 'length>10' | sort |uniq | fzf --reverse | pbcopy"

# Open split
bind t splitw -h -c ~/notes/ "$EDITOR todo.md"
bind a splitw -h -c ~/notes/daily "$EDITOR $(date '+%m-%d-%y_%a').md"
bind j splitw -h -c ~/Daily/ "$EDITOR $(date '+%m-%d-%y_%a').md"
bind T splitw -h -c ~/til/ "$EDITOR $(date '+%m-%d-%y_%a').md"
bind w splitw -h -c ~/wiki "nvim +Files"
bind C-d split-window -h -c ~/.dotfiles/ "nvim +Files"
bind R split-window -h -c ~/ "rcup"
bind m command-prompt -p man: "splitw -h 'man %1'"
# run command
bind -n M-h command-prompt -p 'zsh:' "splitw -l 30% -h -c \"#{pane_current_path}\" 'source ~/.zsh/configs/functions.zsh; source ~/.zsh/configs/aliases.zsh; %1 ; read'"
bind -n M-g command-prompt -p 'batgrep:' "splitw -l 30% -h -c \"#{pane_current_path}\" 'batgrep --smart-case --search-pattern %1'"
bind C-g splitw -l 40% -p 60 -h -c "#{pane_current_path}" "gfzf"
# Create a new session from fuzzy project list
# TODO:
# bind C-t split-window -v "source ~/.zsh/configs/navigation.zsh && tm-select-session"
# Dismiss current pane to background window
bind b break-pane -d
bind C-b send-keys 'tat && exit' Enter
# kill current session and switch another session, keeping connected to tmux throughout.
bind-key ! run-shell '(tmux switch-client -l || tmux switch-client -n) && tmux kill-session -t "#S" || tmux kill-session'
bind-key J command-prompt -p "join pane from: "  "join-pane -h -s '%%'"
# Make C-j display a selectable list of sessions
bind C-j splitw -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# # zoom vim window & tmux
bind -n M-q if-shell "$is_vim" "send-keys ';ZoomWinTabToggle' Enter" \; resize-pane -Z

# Easy reloading of the tmux.conf configuration file
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
# Secondary binding for C-l to retain redraw
bind C-l send-keys 'C-l'
# more intuitive keybindings for splitting
bind '\' splitw -h -c "#{pane_current_path}"
bind - splitw -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# HACK: Karabiner coupled {{{
# left_command zoom on tap
bind -n M-Tab resize-pane -Z
# jump to prev command (uses pure prompt ❯)
# tap git diff working (l_opt), staged (r_opt)
bind -n M-C splitw -l 35% -h -c "#{pane_current_path}" 'git diff -- . ":(exclude)*.lock"; read'
bind -n M-C-c splitw -l 35% -h -c "#{pane_current_path}" 'git diff --cached  -- . ":(exclude)*.lock"; read'
# }}}

# Navigation {{{
# https://github.com/aserowy/tmux.nvim {{{
# Allow fzf to use c-[hijlk] keys
# https://blog.bugsnag.com/tmux-and-vim/
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
is_fzf="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

bind -n C-h run "($is_vim && tmux send-keys C-h) || \
                 tmux select-pane -L"
bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
                 ($is_fzf && tmux send-keys C-j) || \
                 tmux select-pane -D"
bind -n C-k run "($is_vim && tmux send-keys C-k) || \
                 ($is_fzf && tmux send-keys C-k)  || \
                 tmux select-pane -U"
bind -n C-l run "($is_vim && tmux send-keys C-l) || \
                 tmux select-pane -R"
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

# resize
bind -n M-a if-shell "$is_vim" 'send-keys left ' 'resize-pane -L 1'
bind -n M-d if-shell "$is_vim"  'send-keys right' 'resize-pane -R 1'
bind -n S-Left  if-shell "$is_vim" 'send-keys left ' 'resize-pane -L 1'
bind -n S-Down  if-shell "$is_vim" 'send-keys down ' 'resize-pane -D 1'
bind -n S-Up    if-shell "$is_vim" 'send-keys up   ' 'resize-pane -U 1'
bind -n S-Right if-shell "$is_vim" 'send-keys right' 'resize-pane -R 1'
bind-key -T copy-mode-vi S-Left  resize-pane -L 1
bind-key -T copy-mode-vi S-Down  resize-pane -D 1
bind-key -T copy-mode-vi S-Up    resize-pane -U 1
bind-key -T copy-mode-vi S-Right resize-pane -R 1

# my extras
bind -n M-e if-shell "$is_vim" "send-keys ';VtrFocusRunner' Enter" "select-pane -l"
bind -n M-w if-shell "$is_vim" "send-keys ';VtrFocusRunner' Enter" "select-pane -l \; resize-pane -Z"
# save, repeat prev cmd, toggle between zoomed runner/dev buffer
bind -n M-y if-shell "$is_vim" "send-keys ';w' Enter ';VtrSendCommandToRunner' Enter ';VtrFocusRunner' Enter" "select-pane -l \; resize-pane -Z"
# save, run vim-test :TestLast, toggle zoomed runner/dev buffer
bind -n M-t if-shell "$is_vim" "send-keys ';w' Enter ';TestLast' Enter ';VtrFocusRunner' Enter" "select-pane -l \; resize-pane -Z"
# }}}

# fzf windows and panes
bind 0 splitw -b 'bash -ci ftpane'
# fzf pane from current window
bind C-p splitw -b -p 20 'bash -ci ftcurrentpane'
# fzf windows
bind C-f run -b ftwind

bind -n M-j previous-window
bind -n M-k next-window
bind -n M-l last-window
bind -n M-p switch-client -l
bind-key -n M-b select-pane -l
bind C-k swap-pane -U
# Easily swap a pane/window (targeted by pane number) with the current pane
bind-key w command-prompt -p "window #: "  "swap-window -t '%%'"

bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t:9
bind -n M-0 select-window -t:$

# cycle pane
bind -n M-o select-pane -t :.+
bind 1 select-pane -t 0
bind 2 select-pane -t 1
bind 3 select-pane -t 2
bind 4 select-pane -t 3
bind 5 select-pane -t 4
bind 6 select-pane -t 5
bind 7 select-pane -t 6
bind 8 select-pane -t 7
bind 9 select-pane -t 8

bind S-Left  select-layout even-horizontal
bind S-Right select-layout main-horizontal
bind S-Down  select-layout even-vertical
bind S-Up    select-layout main-vertical
# revert layout
bind -n S-PageDown select-layout -o
# }}}

# Plugins {{{
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'wfxr/tmux-fzf-url'
set -g @plugin 'sainnhe/tmux-fzf'

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-processes 'irb pry "~rails server" "~rails console" ssh psql mysql sqlite3'

set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'

set -g @plugin 'fcsonline/tmux-thumbs'
set -g @thumbs-unique 1
set -g @thumbs-contrast 0
set -g @thumbs-command "printf {} | pbcopy"
set -g @thumbs-regexp-1 "`([^\`]*\s*[^\`]*)*`"

run '~/.tmux/plugins/tpm/tpm'
# }}}
