# Ctrl-s prefix key. Default => C-b. Send C-s with repeat option via C-s C-s
unbind-key C-b
set -g prefix C-space
bind -r C-space send-prefix

# italic https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/
# https://apple.stackexchange.com/questions/249307/tic-doesnt-read-from-stdin-and-segfaults-when-adding-terminfo-to-support-italic/249385#249385
set -g default-terminal "tmux-256color"
set -as terminal-overrides ',xterm*:sitm=\E[3m'

# Start window numbering at 1 (default => 0)
# set -g base-index 1 # trying out the default again as this makes
# the 0th pane special, and the first and second more clear

set -g clock-mode-style 12

# Renumber windows after removing one
set -g renumber-windows on

# Make Vim responsive to esc
set -s escape-time 0

set-option -g status-interval 1
# Keep plenty of history for scrollback
set -g history-limit 10000

# bind Escape copy-mode

bind m splitw -h 'reattach-to-user-namespace mutt'

bind g splitw -h -p 50 'gitsh'

# Use vim keybindings in copy mode
setw -g mode-keys vi
# unbind-key -t vi-copy v
# bind-key -t vi-copy v begin-selection
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
# bind-key -T copy-mode-vi 'y' send -X copy-selection
# kind-key -T copy-mode-vi 'y' send-keys -X copy-selection-and-cancel
bind-key -T copy-mode-vi Enter send-keys -X copy-selection-and-cancel
bind-key -T copy-mode-vi 'y' send-keys -X copy-selection
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

set-option -g default-command "reattach-to-user-namespace -l $SHELL"

# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# unbind -t vi-copy Space
# bind -t vi-copy Space jump-again
# bind-key -t vi-copy 0 back-to-indentation

bind y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '
bind C-y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '
bind m command-prompt -p man: "splitw -h 'man %1'"

# # Smart pane switching with awareness of vim splits
# # See this blog post for additional detail:
# # http://robots.thoughtbot.com/post/53022241323/seamlessly-navigate-vim-and-tmux-splits
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Allow fzf to use c-[hijlk] keys
# https://blog.bugsnag.com/tmux-and-vim/
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

bind -n C-h run "($is_vim && tmux send-keys C-h) || \
                 tmux select-pane -L"

bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
                 ($is_fzf && tmux send-keys C-j) || \
                 tmux select-pane -D"

bind -n C-k run "($is_vim && tmux send-keys C-k) || \
                 ($is_fzf && tmux send-keys C-k)  || \
                 tmux select-pane -U"

bind -n C-l run "($is_vim && tmux send-keys C-l) || \
                 tmux select-pane -R"

bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

bind-key -n M-o select-pane -l

# toggle focusrunner
bind -n M-e if-shell "$is_vim" "send-keys ;VtrFocusRunner C-m" "select-pane -l"
# save, repeat prev cmd, toggle between zoomed runner/dev buffer
bind -n M-C-e if-shell "$is_vim" "send-keys ;w C-m ;VtrSendCommandToRunner C-m ;VtrFocusRunner C-m" "select-pane -l; resize-pane -Z"
# save, run vim-test :TestLast, toggle zoomed runner/dev buffer
bind -n M-C-t if-shell "$is_vim" "send-keys ;w C-m ;TestLast C-m ;VtrFocusRunner C-m" "select-pane -l; resize-pane -Z"

bind Space set status


# fzf windows and panes
bind 0 splitw 'bash -ci ftpane'
# fzf pane from current window
bind -n M-C-f splitw -b -p 20 'bash -ci ftcurrentpane'
# fzf windows
bind f run -b ftwind

# Secondary binding for C-l to retain redraw
bind C-l send-keys 'C-l'

# Easy rotating of panes
bind C-k swap-pane -U

# Quick access to todo file
bind t splitw -h -c ~/notes/ "reattach-to-user-namespace nvim todo.md"
bind a splitw  -h -c ~/notes/ "reattach-to-user-namespace nvim daily.md"
bind A splitw  -h -c ~/notes/ "reattach-to-user-namespace nvim shortcuts.md"
bind j splitw -h -c ~/journal "reattach-to-user-namespace nvim $(date '+%a-%b%d-%Y').md"
# bind n splitw -h -c ~/journal/5minute 'reattach-to-user-namespace nvim "$(date '+%a-%b%d-%Y').md"'

# Quick access to wiki
# bind W splitw -h -c ~/wiki 'reattach-to-user-namespace vim routines.md +"/^Morning Work" +"set foldlevel=0" +"nohlsearch" +"normal zv"'

# Create a new session from fuzzy project list
bind C-t splitw -v "source ~/.zshrc && tm-select-session"

# Show pane numbers for half a second
set -g display-panes-time 350

# status bar stuff
set -g status-left-length 40

# Binding to toggle synchronize panes
is_synched='[[ $(tmux show-window-options -v synchronize-panes) == "on" ]]'
bind-key S if-shell "$is_synched" "set-window-option synchronize-panes off" "set-window-option synchronize-panes on"

# Simplify status bar display.
set -g status-left '[#S]'
# set -g status-right "#{?pane_synchronized,--SYNCED--,} #(battery -t -g black)  #(date '+%a, %b %d - %I:%M') "
set -g status-right '#(~/.bin/gmusicplaying.sh)'

# HACK: jump to beginning of most recent cmd (uses pure prompt search char)
bind Escape copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "‚ùØ"

bind-key -T copy-mode-vi / command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""

# Dismiss current pane to background window
bind b break-pane -d
bind C-b send-keys 'tat && exit' 'C-m'
bind-key ! run-shell '(tmux switch-client -l || tmux switch-client -n) && tmux kill-session -t "#S" || tmux kill-session'
bind-key J command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# Easily swap a pane/window (targeted by pane number) with the current pane
bind-key s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"
bind-key w command-prompt -p "window #: "  "swap-window -t '%%'"

# more intuitive keybindings for splitting
bind \ splitw -h -c "#{pane_current_path}"
bind - splitw -v -c "#{pane_current_path}"

# bind c new-window -c "#{pane_current_path}"
# default new windows to blank name
bind c new-window -n ''

# Make C-j display a selectable list of sessions
bind C-j splitw -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# Quick session switching back and forth. I never use the built in layouts
# (default mapping for ata/dynamoStore.js
# ce), so I reclaimed the key for this
# bind-key Space switch-client -l

# Keep window names as I set them
setw -g automatic-rename off

# The base index for windows and panes to 1 instead of the default 0.
# # Now prefix 1 is the first window instead of a prefix 0 being the first.
set -g base-index 1
# setw -g pane-base-index 1 # not recognized by my tmux

# Easy reloading of the tmux.conf configuration file
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"


# Search for URL in scrollback, open with o
# bind-key u copy-mode \; send-keys "?https" "C-m"
# bind-key -t vi-copy o copy-pipe "xargs open"

# Set the term environment variable when using tmux
set-option -ga terminal-overrides ",xterm-256color:Tc,rxvt-unicode-256color:Tc"

# Provide access to the clipboard for pbpaste, pbcopy (details: http://goo.gl/DN82E)
set-option -g default-command "reattach-to-user-namespace -l zsh"
set-window-option -g automatic-rename on

# https://mutelight.org/practical-tmux
setw -g aggressive-resize on

# bind resizing of panes to H,J,K,L (resizes by steps of 10 lines/columns)
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1
bind -n C-Left resize-pane -L 10
bind -n C-Right resize-pane -R 10
bind -n C-Down resize-pane -D 5
bind -n C-Up resize-pane -U 5

# remap iterm2 cmd_l to use alt_l
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
# bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-4 select-window -t {end}

# bind-key -n M-b if-shell 'test #{window_panes} -gt 1' 'last-pane' 'last-window'
# bind -n M-E last-pane
# bind -n M-C-E last-pane
bind -n M-j previous-window
bind -n M-k next-window
bind -n M-l last-window
bind -n M-p switch-client -l
bind -n M-i copy-mode
# coupled to karabiner for tap key
bind -n M-` resize-pane -Z

bind -n M-C-g splitw -p 55 -h -c "#{pane_current_path}" 'fzf-git-graph; read'
bind -n M-C-l splitw -p 60 -h -c "#{pane_current_path}" 'git log --topo-order --stat --patch --pretty=format:${_git_log_medium_format} -- . ":(exclude)*.lock" ; read'
bind -n M-C-L splitw -p 60 -h -c "#{pane_current_path}" "fzf-git-browser ; read"
bind -n M-L splitw -p 60 -h -c "#{pane_current_path}" 'git log --reverse --topo-order --stat --patch --pretty=format:${_git_log_medium_format} -- . ":(exclude)*.lock" ; read'
# bind -n M-F splitw -h -c "#{pane_current_path}" 'git log --patch --follow -- . ":(exclude)*.lock" ; read'
bind -n M-C splitw -h -c "#{pane_current_path}" 'git diff -- . ":(exclude)*.lock"; read'
bind -n M-C-c splitw -h -c "#{pane_current_path}" 'git diff --cached  -- . ":(exclude)*.lock"; read'
bind -n M-T splitw -h -c "#{pane_current_path}" 'tree -C -I node_modules . | less -F ; read'
bind -n M-C-r splitw -h -c "#{pane_current_path}" 'bundle exec rake routes ; read'
bind -n M-R splitw -h -c "#{pane_current_path}" 'reattach-to-user-namespace nvim -O Gemfile config/routes.rb db/schema.rb'
bind -n M-P splitw -h -c "#{pane_current_path}" 'reattach-to-user-namespace nvim package.json'

bind -n M-- select-layout even-vertical
bind -n M-\ select-layout even-horizontal
bind -n M-_ select-layout main-horizontal
bind -n M-= select-layout tiled

bind h run-shell -b "$ZNT_REPO_DIR/znt-tmux.zsh"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-open' # TODO: 2.4 broken
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @plugin 'tmux-plugins/tmux-yank' # TODO: 2.4 broken sometimes?
set -g @plugin 'tmux-plugins/tmux-online-status'
# set -g @plugin 'tmux-plugins/tmux-copycat' # TODO: 2.4 broken
# set -g @plugin 'Morantron/tmux-fingers' # TODO: broken
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum' #TODO:
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-strategy-vim 'session'

# TODO: copycat broke with tmux 2.4 -- using forked fix for now https://github.com/thalesmello/tmux-copycat
run-shell ~/.tmux/tmux-copycat/copycat.tmux
# git sha
set -g @copycat_search_G '\b[0-9a-f]{5,40}\b'
# rails log previous request start
set -g @copycat_search_C-e '^Processing[[:space:]]by[[:space:]][^[:space:]]*'

# https://github.com/tmux-plugins/vim-tmux-focus-events
set -g focus-events on

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'
# for neovim

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)

run '~/.tmux/plugins/tpm/tpm'
