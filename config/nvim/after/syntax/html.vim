" {{{ must manually copy to head of /usr/local/Cellar/neovim/HEAD-f8173df_2/share/nvim/runtime/syntax/html.vim
syn keyword htmlArg class conceal cchar=‚ÑÇ
syn keyword htmlArg id conceal cchar=#
syn match htmlArg '\s\zsdata-' conceal cchar=‚äá
syn keyword htmlTagName div conceal
syn keyword htmlTagName p conceal cchar=¬∂
syn keyword htmlTagName span conceal cchar=‚áí
syn keyword htmlTagName section conceal cchar=¬ß
syn keyword htmlTagName article conceal cchar=‚´´
syn keyword htmlTagName ol conceal cchar=‚Ñì
syn keyword htmlTagName ul conceal cchar=‚Ñì
syn keyword htmlTagName li conceal cchar=‚Ä¢
syn keyword htmlTagName button conceal cchar=üîò
syn keyword htmlTagName option conceal cchar=‚å•
syn keyword htmlTagName tr conceal cchar=‚áÜ
syn keyword htmlTagName td conceal cchar=‚òê
syn keyword htmlTagName blockquote conceal cchar="
" }}}

if has('conceal') | set conceallevel=2 | else | finish | endif

if !exists("html_no_rendering") || g:html_no_rendering != 0
	syn case ignore
	syn match htmlTag "<i>" conceal
		\ contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster
	syn match htmlEndTag "</i>" conceal contains=htmlTagN,htmlTagError

	syn match htmlTag "<u>" conceal
		\ contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster
	syn match htmlEndTag "</u>" conceal contains=htmlTagN,htmlTagError

	syn match htmlTag "<em>" conceal
		\ contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster
	syn match htmlEndTag "</em>" conceal contains=htmlTagN,htmlTagError

	syn match htmlTag "<b>" conceal
		\ contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster
	syn match htmlEndTag "</b>" conceal contains=htmlTagN,htmlTagError

	syn match htmlTag "<strong>"
		\ conceal contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster
	syn match htmlEndTag "</strong>" conceal contains=htmlTagN,htmlTagError

	syn clear htmlBold htmlBoldUnderline htmlBoldItalic htmlBoldUnderlineItalic htmlBoldItalicUnderline
	syn region htmlBold start="<b\>" end="</b>"me=e-4 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
	syn region htmlBold start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
	syn region htmlBoldUnderline contained start="<u\>" end="</u>"me=e-4 contains=@htmlTop,htmlBoldUnderlineItalic
	syn region htmlBoldItalic contained start="<i\>" end="</i>"me=e-4 contains=@htmlTop,htmlBoldItalicUnderline
	syn region htmlBoldItalic contained start="<em\>" end="</em>"me=e-5 contains=@htmlTop,htmlBoldItalicUnderline
	syn region htmlBoldUnderlineItalic contained start="<i\>" end="</i>"me=e-4 contains=@htmlTop
	syn region htmlBoldUnderlineItalic contained start="<em\>" end="</em>"me=e-5 contains=@htmlTop
	syn region htmlBoldItalicUnderline contained start="<u\>" end="</u>"me=e-4 contains=@htmlTop,htmlBoldUnderlineItalic

	syn clear htmlUnderline htmlUnderlineBold htmlUnderlineItalic htmlUnderlineItalicBold htmlUnderlineBoldItalic
	syn region htmlUnderline start="<u\>" end="</u>"me=e-4 contains=@htmlTop,htmlUnderlineBold,htmlUnderlineItalic
	syn region htmlUnderlineBold contained start="<b\>" end="</b>"me=e-4 contains=@htmlTop,htmlUnderlineBoldItalic
	syn region htmlUnderlineBold contained start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop,htmlUnderlineBoldItalic
	syn region htmlUnderlineItalic contained start="<i\>" end="</i>"me=e-4 contains=@htmlTop,htmlUnderlineItalicBold
	syn region htmlUnderlineItalic contained start="<em\>" end="</em>"me=e-5 contains=@htmlTop,htmlUnderlineItalicBold
	syn region htmlUnderlineItalicBold contained start="<b\>" end="</b>"me=e-4 contains=@htmlTop
	syn region htmlUnderlineItalicBold contained start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop
	syn region htmlUnderlineBoldItalic contained start="<i\>" end="</i>"me=e-4 contains=@htmlTop
	syn region htmlUnderlineBoldItalic contained start="<em\>" end="</em>"me=e-5 contains=@htmlTop

	syn clear htmlItalic htmlItalicBold htmlItalicBoldUnderline htmlItalicUnderline htmlItalicUnderlineBold
	syn region htmlItalic start="<i\>" end="</i>"me=e-4 contains=@htmlTop,htmlItalicBold,htmlItalicUnderline
	syn region htmlItalic start="<em\>" end="</em>"me=e-5 contains=@htmlTop
	syn region htmlItalicBold contained start="<b\>" end="</b>"me=e-4 contains=@htmlTop,htmlItalicBoldUnderline
	syn region htmlItalicBold contained start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop,htmlItalicBoldUnderline
	syn region htmlItalicBoldUnderline contained start="<u\>" end="</u>"me=e-4 contains=@htmlTop
	syn region htmlItalicUnderline contained start="<u\>" end="</u>"me=e-4 contains=@htmlTop,htmlItalicUnderlineBold
	syn region htmlItalicUnderlineBold contained start="<b\>" end="</b>"me=e-4 contains=@htmlTop
	syn region htmlItalicUnderlineBold contained start="<strong\>" end="</strong>"me=e-9 contains=@htmlTop
endif

scriptencoding UTF-8

let s:added_html_charconceal_number = {}
function! HTMLAddEntityConceal(char, ...)
" Arguments:
" 2 args: 1 = concealed character to display, 2 = match pattern to conceal in
"                                                 the form of: &...;
" 1 arg:  1 = decimal number to match in &#...; format, character to display
"             is computed from this
	if ! has('conceal') | return | endif

	if a:0 == 1 && strlen(substitute(a:char, '.', 'x', 'g')) == 1
				\ && a:1 =~ '^&#\?\w\+;$'

		syn case match
		exe "syn match htmlSpecialChar '"
			\ . a:1 . "' conceal cchar=" . a:char

		let nr = char2nr(a:char)
		if ! exists('s:added_html_charconceal_number[' . nr . ']')
			let s:added_html_charconceal_number[l:nr] = nr2char(nr)
			syn case match
			exe "syn match htmlSpecialChar '&#"
				\ . nr . ";' conceal cchar=" . a:char
			syn case ignore
			exe "syn match htmlSpecialChar '&#x"
				\ . printf('%2X', nr) . ";' conceal cchar=" . a:char
		endif


	elseif a:0 == 0 && a:char =~ '^[0-9]\+$'
		if ! exists('s:added_html_charconceal_number[' . a:char . ']')
			let s:added_html_charconceal_number[a:char] = nr2char(a:char)
			syn case match
			exe "syn match htmlSpecialChar '&#"
				\ . a:char . ";' conceal cchar=" . nr2char(a:char)
			syn case ignore
			exe "syn match htmlSpecialChar '&#x"
				\ . printf('%2X', a:char) . ";' conceal cchar="
				\ . nr2char(a:char)
		endif
	else
		echoerr expand('<sfile>') . ": Invalid usage."
	endif
endfunction

let s:specials=[
\  ['&',    '&amp;'], ['<' ,    '&lt;'], ['>',      '&gt;'], [' ',   '&nbsp;'],
\  ['¬´',  '&laquo;'], ['¬ª',  '&raquo;'], ['"',    '&quot;'], ['‚Äô',  '&#8217;'], ["'",  '&apos;'],
\  ['¬¢',   '&cent;'], ['¬£',  '&pound;'], ['¬•',     '&yen;'], ['‚Ç¨',   '&euro;'],
\  ['¬©',   '&copy;'], ['¬Æ',    '&reg;'], ['‚Ñ¢',   '&trade;'],
\  ['√ó',  '&times;'], ['√∑', '&divide;'], ['¬±',  '&plusmn;'],
\  ['¬π',   '&sup1;'], ['¬≤',   '&sup2;'], ['¬≥',    '&sup3;'],
\  ['¬°',  '&iexcl;'], ['¬ø', '&iquest;'],
\  ['¬∞',    '&deg;'],
\  ['¬µ',  '&micro;'],
\  ['¬∂',   '&para;'], ['¬ß',   '&sect;'],
\  ['¬∑', '&middot;'],
\  ['¬º', '&frac14;'], ['¬Ω', '&frac12;'], ['¬æ', '&frac34;'], ["‚Öì", "&frac13;"],
\  ["‚Öî", "&frac23;"], ["‚Öï", "&frac15;"], ["‚Öñ", "&frac25;"], ["‚Öó", "&frac35;"],
\  ["‚Öò", "&frac45;"], ["‚Öô", "&frac16;"], ["‚Öö", "&frac56;"], ["‚Öõ", "&frac18;"],
\  ["‚Öú", "&frac38;"], ["‚Öù", "&frac58;"], ["‚Öû", "&frac78;"],
\  ['‚Äì',  '&ndash;'], ['‚Äî',  '&mdash;'], ['‚Ä¶',  '&hellip;'],
\  ['√Ä', '&Agrave;'], ['√†', '&agrave;'], ['√Å',  '&Aacute;'], ['√°', '&aacute;'],
\  ['√à', '&Egrave;'], ['√®', '&egrave;'], ['√â',  '&Eacute;'], ['√©', '&eacute;'],
\  ['√å', '&Igrave;'], ['√¨', '&igrave;'], ['√ç',  '&Iacute;'], ['√≠', '&iacute;'],
\  ['√í', '&Ograve;'], ['√≤', '&ograve;'], ['√ì',  '&Oacute;'], ['√≥', '&oacute;'],
\  ['√ô', '&Ugrave;'], ['√π', '&ugrave;'], ['√ö',  '&Uacute;'], ['√∫', '&uacute;'],
\  ['√ù', '&Yacute;'], ['√Ω', '&yacute;'],
\  ['√É', '&Atilde;'], ['√£', '&atilde;'],
\  ['√ë', '&Ntilde;'], ['√±', '&ntilde;'],
\  ['√ï', '&Otilde;'], ['√µ', '&otilde;'],
\  ['√Ç',  '&Acirc;'], ['√¢',  '&acirc;'],
\  ['√ä',  '&Ecirc;'], ['√™',  '&ecirc;'],
\  ['√é',  '&Icirc;'], ['√Æ',  '&icirc;'],
\  ['√î',  '&Ocirc;'], ['√¥',  '&ocirc;'],
\  ['√õ',  '&Ucirc;'], ['√ª',  '&ucirc;'],
\  ['√Ñ',   '&Auml;'], ['√§',   '&auml;'],
\  ['√ã',   '&Euml;'], ['√´',   '&euml;'],
\  ['√è',   '&Iuml;'], ['√Ø',   '&iuml;'],
\  ['√ñ',   '&Ouml;'], ['√∂',   '&ouml;'],
\  ['√ú',   '&Uuml;'], ['√º',   '&uuml;'],
\  ['√ø',   '&yuml;'], ['¬®',    '&uml;'],
\  ['√Ö',  '&Aring;'], ['√•',  '&aring;'],
\  ['√Ü',  '&AElig;'], ['√¶',  '&aelig;'],
\  ['√á', '&Ccedil;'], ['√ß', '&ccedil;'],
\  ['√ò', '&Oslash;'], ['√∏', '&oslash;'],
\  ['‚Üî',   '&harr;'], ['‚Üì',   '&darr;'], ['‚Üë',    '&uarr;'],
\  ['‚Üí',   '&rarr;'], ['‚Üê',   '&larr;'],
\  ['œñ',    '&piv;'], ['œí',  '&upsih;'], ['œë','&thetasym;'], ['œâ',  '&omega;'],
\  ['œà',    '&psi;'], ['œá',    '&chi;'], ['œÜ',     '&phi;'], ['œÖ','&upsilon;'],
\  ['œÑ',    '&tau;'], ['œÇ', '&sigmaf;'], ['œÉ',   '&sigma;'], ['œÅ',    '&rho;'],
\  ['œÄ',     '&pi;'], ['Œø','&omicron;'], ['Œæ',      '&xi;'], ['ŒΩ',     '&nu;'],
\  ['Œº',     '&mu;'], ['Œª', '&lambda;'], ['Œ∫',   '&kappa;'], ['Œπ',   '&iota;'],
\  ['Œ∏',  '&theta;'], ['Œ∑',    '&eta;'], ['Œ∂',    '&zeta;'], ['Œµ','&epsilon;'],
\  ['Œ¥',  '&delta;'], ['Œ≥',  '&gamma;'], ['Œ≤',    '&beta;'], ['Œ±',  '&alpha;'],
\  ['Œ®',    '&Psi;'], ['Œß',    '&Chi;'], ['Œ¶',     '&Phi;'], ['Œ•','&Upsilon;'],
\  ['Œ§',    '&Tau;'], ['Œ£',  '&Sigma;'], ['Œ°',     '&Rho;'], ['Œ†',     '&Pi;'],
\  ['Œü','&Omicron;'], ['Œû',     '&Xi;'], ['Œù',      '&Nu;'], ['Œú',     '&Mu;'],
\  ['Œõ', '&Lambda;'], ['Œö',  '&Kappa;'], ['Œô',    '&Iota;'], ['Œò',  '&Theta;'],
\  ['Œó',    '&Eta;'], ['Œñ',   '&Zeta;'], ['Œï', '&Epsilon;'], ['Œî',  '&Delta;'],
\  ['Œì',  '&Gamma;'], ['Œí',   '&Beta;'], ['Œë',   '&Alpha;'],
\]

for char in s:specials
	call HTMLAddEntityConceal(char[0], char[1])
endfor

" Define the standard printable ASCII character set as &#..; entities:
let s:i=32
while s:i <= 126
	call HTMLAddEntityConceal(s:i)
	let s:i+=1
endwhile

unlet s:specials s:i

scriptencoding
