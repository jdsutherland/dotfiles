[user]
  name = Jeff Sutherland
  email = jeffdsuth@gmail.com
[color]
  ui = true
[alias]
  aa = add --all
  adp = add --patch
  b = branch
  bhist = "!git --no-pager reflog $(git rev-parse --abbrev-ref HEAD)"
  bom = push --set-upstream origin master
  browse = !hub browse
  bselect = "!branches=$(git branch | grep -v $(git rev-parse --abbrev-ref HEAD)) && branch=$(echo \"$branches\" | fzf --reverse +s +m) && git checkout $(echo \"$branch\" | sed \"s/.* //\")"
  ca = commit --amend
  car = commit --amend --no-edit
  cistatus = "!hub ci-status"
  co = checkout
  compare = !hub compare
  conflicted = !vim +Conflicted
  copysha = "!git rev-parse HEAD | tr -d '\n' | pbcopy"
  count = !git log --oneline | wc -l | awk '{print $1}'
  current-branch = !git rev-parse --abbrev-ref HEAD 2> /dev/null | sed 's/^HEAD$//'
  dc = diff --word-diff --cached --color-words
  df = diff --word-diff --color-words
  patch = !git --no-pager diff --no-color
  pb = log --patch --follow
  deleted = log --topo-order --stat --patch --diff-filter=D
  added = log --topo-order --stat --patch --diff-filter=A
  renamed = log --topo-order --stat --patch --diff-filter=R
  pbr = log --patch --reverse --follow
  dsf = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy | less --tabs=4 -RFX; }; f"
  fall = "!for remote in $(git remote); do echo "Fetching $remote"; git fetch "$remote"; done"
  fpop = !git stash show -p | git apply && git stash drop
  full-commit = !git cat-file -p $(git rev-parse HEAD)
  glog = log -E -i --grep
  issues = !hub browse -- issues
  pulls = !hub browse -- pulls
  lnames = !git --no-pager show --name-only $1
  master = checkout master
  mb = !git merge-base HEAD $1
  mup = !git checkout master && git pull && git checkout -
  next-commit = !git checkout $(git log --reverse --ancestry-path --pretty=%H HEAD..master | head -1)
  no-ff = merge --no-ff
  pf = push --force-with-lease
  pl = pull
  plr = pull --rebase
  pom = push -u origin master
  ps = push
  rbc = rebase --continue
  ri = rebase -i
  rim = !git rebase --interactive $(git merge-base master HEAD)
  riu = !git rebase -i $(git upstream)
  rmdeleted = !git rm $(git ls-files --deleted)
  rom = remote add origin
  root = rev-list --max-parents=0 HEAD
  rpo = remote prune origin
  rr = remote rename jdsutherland fork
  sal = !git sla # Accepting that I will continue to mistype this
  sdot = status . --short --branch
  search = log -S
  si = status --ignored
  sl = log --oneline --decorate --graph -20
  sla = log --oneline --decorate --graph --all -20
  slap = log --oneline --decorate --all --graph
  slp = log --oneline --decorate --graph
  stat = show --stat
  trust = !mkdir .git/safe
  unchange = checkout --
  uncommit = reset --soft HEAD^
  unreleased = !git l production/master..master
  unstage = reset
  upstream = rev-parse --abbrev-ref --symbolic-full-name @{upstream}
  ureset = !git upstream && git reset --hard $(git upstream)
  vdf = difftool
  vv = branch -vv
[core]
  excludesfile = ~/.gitignore
  attributesFile = ~/.gitattributes
  editor = "nvim"
  pager = diff-so-fancy | less --tabs=4 -RFX
[pager]
  diff = diff-so-fancy | less --tabs=4 -RFX --pattern '^(Date|added|deleted|modified): '
[push]
  default = upstream
[merge]
  ff = only
[credential]
  helper = osxkeychain
[rerere]
  enabled = true
[pull]
  rebase = true
[github]
  user = jdsutherland
[fetch]
  prune = true
[commit]
  template = ~/.gitmessage
[gitsh]
  noGreeting = true
  defaultCommand = status --short --branch && :echo
[gitsh "color"]
  default = cyan
  untracked = yellow
  modified = red
[help]
  autocorrect = 1
[color]
  ui = always
[color "diff"]
  meta = yellow bold
  commit = green bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = "red bold 52"
  newNormal = "green bold"
  newHighlight = "green bold 22"
[diff-so-fancy]
  markEmptyLines = false
[ghi]
  token = !security find-internet-password -a jdsutherland -s github.com -l 'ghi token' -w
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
