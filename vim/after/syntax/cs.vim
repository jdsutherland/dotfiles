if exists('g:no_java_conceal') || !has('conceal') || &enc != 'utf-8'
  finish
endif

syntax match javaNiceOperator "*" conceal cchar=‚Åï
syntax match goNiceOperator "==" conceal cchar=‚â°
syntax match csEnclosed "\[\]" conceal cchar=‚åë
syntax match javaNiceOperator "!=" conceal cchar=‚â†
syntax match javaNiceOperator "<=" conceal cchar=‚â§
syntax match javaNiceOperator ">=" conceal cchar=‚â•
syntax match javaNiceOperator "++" conceal cchar=Œî
syntax match javaNiceOperator "--" conceal cchar=‚àá
syntax match javaNiceOperator "||" conceal cchar=‚ãÅ
syntax match javaNiceOperator "&&" conceal cchar=‚ãÄ
syntax match javaNiceOperator "->" conceal cchar=‚áæ
" syntax match javaNiceOperator "->" conceal cchar=‚Üí
syntax match javaNiceOperator "\s\+\zs\.\ze"  conceal cchar=ÔΩ°

syntax match javaNiceFunction "assertEquals" conceal cchar=‚â°

let s:extraConceal = 1
if s:extraConceal
  syntax keyword csConstant null conceal cchar=‚àÖ
  syntax keyword javaNiceKeyword break conceal cchar=‚ÜØ
  " syntax keyword javaNiceKeyword continue conceal cchar=‚Üü
  " syntax keyword javaNiceKeyword else conceal cchar=‚¶Ç
  " syntax keyword javaNiceKeyword case conceal cchar=‚Ü≥
  " syntax keyword javaNiceKeyword class conceal cchar=‚Ç°
  " syntax keyword javaNiceKeyword const conceal cchar=ùî†
  syntax keyword javaNiceKeyword const conceal cchar=ùî†
  syntax keyword javaNiceKeyword public conceal cchar=‡•±
  syntax keyword javaNiceKeyword protected conceal cchar=‡•±
  syntax keyword javaNiceKeyword private conceal cchar=¬∑
  " syntax keyword javaNiceKeyword public conceal cchar=¬∑
  " syntax keyword javaNiceKeyword protected conceal cchar=‚óà
  " syntax keyword javaNiceKeyword private conceal cchar=-
  syntax keyword javaNiceKeyword return conceal cchar=‚áö
  " syntax keyword javaNiceKeyword static conceal cchar=‚àô
  syntax keyword javaNiceKeyword static conceal cchar=‚à¨
  " syntax keyword javaNiceKeyword virtual conceal
  " syntax keyword javaNiceKeyword abstract conceal
  syntax match csType "\v<var " conceal cchar=@

  " syntax keyword javaNiceKeyword break conceal cchar=‚ÜØ
  " " syntax keyword javaNiceKeyword continue conceal cchar=‚Üü
  " " syntax keyword javaNiceKeyword else conceal cchar=‚¶Ç
  " " syntax keyword javaNiceKeyword case conceal cchar=‚Ü≥
  " " syntax keyword javaNiceKeyword class conceal cchar=‚Ç°
  " " syntax keyword javaNiceKeyword const conceal cchar=ùî†
  " syntax keyword javaNiceKeyword final conceal cchar=ùî†
  " " syntax keyword javaNiceKeyword public conceal cchar=‚ñ∂
  " " syntax keyword javaNiceKeyword public conceal cchar=+
  " syntax keyword javaNiceKeyword public conceal cchar=¬∑
  " syntax keyword javaNiceKeyword protected conceal cchar=‚óà
  " syntax keyword javaNiceKeyword private conceal cchar=-
  " syntax keyword javaNiceKeyword return conceal cchar=‚áö
  " syntax keyword javaNiceKeyword static conceal cchar=‚àô
  " syntax keyword javaNiceKeyword virtual conceal cchar=‚Öµ
  " syntax match goVar "\v<var " conceal cchar=@

  syntax keyword javaClassDecl extends conceal cchar=<
  syntax keyword javaClassDecl implements conceal cchar=:

  syntax keyword csNewDecleration new conceal cchar=Œº
  syntax keyword csUnspecifiedStatement this conceal cchar=@
  syntax keyword javaExternal using conceal cchar=…™

  syntax keyword javaBoolean true conceal cchar=T
  syntax keyword javaBoolean false conceal cchar=F

  syntax keyword csType void conceal cchar=‚àÖ
  syntax keyword csType decimal conceal cchar=$
  syntax keyword csType char conceal cchar=ƒã
  syntax keyword csType bool conceal cchar=∆Ä
  syntax keyword csType string conceal cchar=‚üÜ
  syntax keyword csType int conceal cchar=‚Ñ§
  syntax keyword csType float double conceal cchar=‚Ñù
  syntax keyword csType byte conceal cchar=‡∏ø
  syntax keyword csType long conceal cchar= ü

  " syntax match javaHiddenOperator /\S\zs()\ze\(\S\| [^{]\)/ conceal
  " syntax match javaHiddenOperator /^\s*}$/ conceal
  " syntax match javaHiddenOperator /\(^\s*\)\@<=}\s*/ conceal
  " syntax match javaHiddenOperator /\ *{$/ conceal
  syntax match javaHiddenOperator /;$/ conceal
endif

" Java: 'new', 'instanceof'
highlight Operator ctermfg=5  guifg=#d175bc
" Java: 'this', 'super'
highlight Typedef ctermfg=5  guifg=#d175bc
" Java: 'void', 'int', 'double'
highlight Type ctermfg=4  guifg=#69b7d3
" literal numbers
highlight Number term=bold ctermfg=16 gui=bold guifg=#d2d22d

hi link javaNiceConstant Constant
hi link javaNiceKeyword Keyword
hi link javaNiceOperator Operator
hi link javaNiceBoolean Boolean
hi link javaNiceType Type

hi! link Conceal Operator
hi! Conceal ctermbg=Black ctermfg=Magenta

" set expandtab ts=4 sw=4 ai
set tabstop=4       " The width of a TAB is set to 4.
                    " Still it is a \t. It is just that
                    " Vim will interpret it to be having
                    " a width of 4.
set shiftwidth=4    " Indents will have a width of 4.
set softtabstop=4   " Sets the number of columns for a TAB.
set expandtab       " Expand TABs to spaces.
"setlocal conceallevel=2
