if exists('g:no_java_conceal') || !has('conceal') || &enc != 'utf-8'
  finish
endif


" syntax match javaNiceOperator "*" conceal cchar=‚Åï
syntax match csEnclosed "==" conceal cchar=‚â°
syntax match csEnclosed "\[\]" conceal cchar=‚åë
syntax match javaNiceOperator "!=" conceal cchar=‚â†
syntax match javaNiceOperator "<=" conceal cchar=‚â§
syntax match javaNiceOperator ">=" conceal cchar=‚â•
syntax match javaNiceOperator "++" conceal cchar=Œî
syntax match javaNiceOperator "--" conceal cchar=‚àá
syntax match javaNiceOperator "||" conceal cchar=‚à®
syntax match javaNiceOperator "&&" conceal cchar=‚àß
syntax match javaNiceOperator "->" conceal cchar=‚áæ
syntax match javaNiceOperator "=>" conceal cchar=‚áí
syntax keyword javaNiceOperator interface conceal cchar=‚ôÄ
syntax match pythonStatement "Assert" conceal cchar=‚úì
" syntax match javaNiceOperator "->" conceal cchar=‚Üí
syntax match javaNiceOperator "^\s*\zs\.\ze"  conceal cchar=ÔΩ°

syntax match javaNiceFunction "assertEquals" conceal cchar=‚â°

" syntax match javaHiddenType "\v\zs[A-Z]\w+\s\ze[_a-z]+" conceal
" syntax match javaHiddenType "\v\zs[A-Z][<A-Za-z>]+\ze\s[_a-z]+" conceal cchar=‚Ñì
" syntax match javaConcealType "\v(class)@<![ (]\zs[A-Z][<A-Za-z>]+\ze\s[_a-z]+" conceal cchar=‚Ñì " types
syntax match javaConcealType "\v(class)@<![ (]\zs[A-Z][<A-Za-z>]+\ze\s[_a-zA-Z<>]+" conceal cchar=‚Ñì " types
syntax match javaConcealType "\v\zs[A-Z][<>A-Za-z]+\ze\s[A-Z][A-Za-z]+.*\{\s(get|set)" conceal cchar=‚Ñì " types (props)
syntax match javaConcealType "\v\zs[A-Z][A-Za-z<, >]+\ze\s[_a-zA-Z]+\(" conceal cchar=‚Ñì " method return types

syntax keyword csAsync async conceal cchar=√Ö‚±£
syntax keyword csAsync await conceal cchar=√•

" syntax match csFuncDef "\v\s\zs[A-Z]\w+\ze\(.*\)$"
" syntax match csFuncDef "\v\s\zs[A-Z]\w+\ze\(\_.*\)$"
syntax match csFuncDef "\v\s\zs[A-Za-z]\w+\ze\(.*\)\_.\s*\{"
syntax match csFuncDef "\v\s\zs[A-Za-z]\w+\ze\(.*\)\s+\=\>" " fat arrow

" TODO: keep both?
syntax match csFuncDef "\v\s\zs[A-Za-z]\w+\ze\(\n" " multiline defs
" TODO: doesn't highlight  `Handler<TEvent>` in `private IEventHandler<TEvent> Handler<TEvent>(CommerceContext context)` even though the search matches
syntax match csFuncDef "\v(public|private|protected|internal).*\s\zs[A-Z][A-Za-z<, >]+\ze\(\n" " multiline defs
hi def link csFuncDef Function

let s:extraConceal = 1
if s:extraConceal
  syntax keyword csConstant null conceal cchar=‚àÖ
  syntax keyword javaNiceKeyword break conceal cchar=‚ÜØ
  " syntax keyword javaNiceKeyword continue conceal cchar=‚Üü
  " syntax keyword javaNiceKeyword else conceal cchar=‚¶Ç
  " syntax keyword javaNiceKeyword case conceal cchar=‚Ü≥
  " syntax keyword javaNiceKeyword class conceal cchar=‚Ç°
  " syntax keyword javaNiceKeyword const conceal cchar=ùî†
  syntax keyword javaNiceKeyword const conceal cchar=ùî†
  syntax keyword javaNiceKeyword readonly conceal cchar=ùî†
  syntax keyword javaNiceKeyword public conceal cchar=+
  syntax keyword javaNiceKeyword protected conceal cchar=|
  syntax keyword javaNiceKeyword private conceal cchar=-
  syntax keyword javaNiceKeyword internal conceal cchar=&
  syntax keyword javaNiceKeyword delegate conceal cchar=∆í
  syntax keyword javaNiceKeyword virtual conceal cchar=·πø
  syntax keyword javaNiceKeyword override conceal cchar=·ªç
  syntax keyword javaNiceKeyword abstract conceal cchar=ƒÅ
  " syntax keyword javaNiceKeyword public conceal cchar=¬∑
  " syntax keyword javaNiceKeyword protected conceal cchar=‚óà
  " syntax keyword javaNiceKeyword private conceal cchar=-
  syntax keyword csRepeat return conceal cchar=‚áö
  " syntax keyword javaNiceKeyword static conceal cchar=‚àô
  syntax keyword javaNiceKeyword static conceal cchar=‚à¨
  " syntax keyword javaNiceKeyword virtual conceal
  " syntax keyword javaNiceKeyword abstract conceal

  " syntax keyword javaNiceKeyword break conceal cchar=‚ÜØ
  " " syntax keyword javaNiceKeyword continue conceal cchar=‚Üü
  " " syntax keyword javaNiceKeyword else conceal cchar=‚¶Ç
  " " syntax keyword javaNiceKeyword case conceal cchar=‚Ü≥
  " " syntax keyword javaNiceKeyword class conceal cchar=‚Ç°
  " " syntax keyword javaNiceKeyword const conceal cchar=ùî†
  " syntax keyword javaNiceKeyword final conceal cchar=ùî†
  " " syntax keyword javaNiceKeyword public conceal cchar=‚ñ∂
  " " syntax keyword javaNiceKeyword public conceal cchar=+
  " syntax keyword javaNiceKeyword public conceal cchar=¬∑
  " syntax keyword javaNiceKeyword protected conceal cchar=‚óà
  " syntax keyword javaNiceKeyword private conceal cchar=-
  " syntax keyword javaNiceKeyword return conceal cchar=‚áö
  " syntax keyword javaNiceKeyword static conceal cchar=‚àô
  " syntax keyword javaNiceKeyword virtual conceal cchar=‚Öµ
  syntax keyword csType var conceal cchar=‚Ñì

  syntax keyword javaClassDecl extends conceal cchar=<
  syntax keyword javaClassDecl implements conceal cchar=:

  syntax keyword csNewDecleration new conceal cchar=Œº
  syntax keyword csUnspecifiedStatement this conceal cchar=@
  " syntax keyword javaExternal using conceal cchar=…™

  syntax keyword csConstant true conceal cchar=T
  syntax keyword csConstant false conceal cchar=F

  syntax keyword csType void conceal cchar=‚àÖ
  syntax keyword csType decimal conceal cchar=$
  syntax keyword csType char conceal cchar=ƒã
  syntax keyword csType bool conceal cchar=∆Ä
  syntax keyword csType string conceal cchar=‚üÜ
  syntax keyword csType int conceal cchar=‚Ñ§
  syntax keyword csType float double conceal cchar=‚Ñù
  syntax keyword csType byte conceal cchar=‡∏ø
  syntax keyword csType long conceal cchar= ü
  syntax keyword csType object conceal cchar=…µ

  " hide no arg method() parens
  syntax match javaHiddenOperator /\S\zs()\ze\(\S\| [^{]\)/ conceal

  " trailing }
  syntax match javaHiddenOperator /^\s*}$/ conceal
  syntax match javaHiddenOperator /\(^\s*\)\@<=}\s*/ conceal

  " beginning {
  syntax match javaHiddenOperator /\ *{$/ conceal

  " trailing ;
  syntax match javaHiddenOperator /;$/ conceal
endif

hi link javaNiceConstant Constant
hi link javaNiceKeyword Keyword
hi link javaNiceOperator Operator
hi link javaNiceBoolean Boolean
hi link javaNiceType Type

hi! link Conceal Operator
hi! Conceal ctermbg=Black ctermfg=Magenta

" set expandtab ts=4 sw=4 ai
set tabstop=4       " The width of a TAB is set to 4.
                    " Still it is a \t. It is just that
                    " Vim will interpret it to be having
                    " a width of 4.
set shiftwidth=4    " Indents will have a width of 4.
set softtabstop=4   " Sets the number of columns for a TAB.
set expandtab       " Expand TABs to spaces.
"setlocal conceallevel=2
